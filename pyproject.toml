[tool.poetry]
name = "notegen-ai-apis"
version = "0.1.0"
description = "Medical SOAP note generation microservice using AI and RAG systems"
authors = ["NoteGen Team <team@notegen.ai>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Web Framework
fastapi = "^0.110.0"
uvicorn = {extras = ["standard"], version = "^0.27.0"}
pydantic = "^2.6.0"
pydantic-settings = "^2.2.0"

# Core AI/ML - Updated to compatible versions
openai = "^1.14.0"
langchain = "^0.3.7"
langchain-openai = "^0.2.0"
langchain-community = "^0.3.0"
langchain-neo4j = "^0.4.0"

# Database connections
neo4j = "^5.18.0"
chromadb = "^0.4.24"

# Observability
prometheus-client = "^0.20.0"
langfuse = "^2.0.0"

# Security
cryptography = "^42.0.5"
pyjwt = "^2.8.0"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}

# Async and HTTP
httpx = "^0.27.0"
aiofiles = "^23.2.1"

# Data processing
pandas = "^2.2.0"
numpy = "^1.26.0"

# Utilities
python-multipart = "^0.0.9"
python-dotenv = "^1.0.1"
psutil = "^5.9.8"
weaviate-client = "4.5.4"
opensearch-py = "^2.4.0"
boto3 = "^1.34.0"
requests-aws4auth = "^1.2.3"
colorlog = "^6.9.0"
json-repair = "0.39.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
black = "^23.12.0"
isort = "^5.13.0"
ruff = "^0.1.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"
bandit = "^1.7.5"
safety = "^2.3.5"
pytest-watch = "^4.2.0"
locust = "^2.37.10"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.ruff]
line-length = 100
target-version = "py311"
select = ["E", "W", "F", "I", "N", "B", "BLE", "C", "D", "UP", "ANN", "S", "FBT", "A", "COM", "C4", "DTZ", "T10", "ISC", "ICN", "G", "INP", "PIE", "T20", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "NPY", "RUF"]
ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "ANN101", "ANN102", "COM812", "ISC001"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 90
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 